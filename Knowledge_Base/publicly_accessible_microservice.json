{
  "smell_name": "Publicly Accessible Microservices",
  "brief_description": "This smell occurs when internal microservices, which should not be exposed to the Internet, are publicly reachable. These services (e.g., databases, message queues, core business services) become a direct target for attackers if they are not adequately protected at the network level. Code snippets containing these words: ‘ports:’ , ‘0.0.0’, ‘NodePort’ might contain this smell, check them all; especially in docker-compose file",
  "microservices_context": [
    "customer-core",
    "policy-management-backend",
    "activemq",
    "risk-management-nodejs"
  ],
  "manifestations": [
    {
      "artifact_type": "Deployment Configuration",
      "language": "docker-compose",
      "negative_example": "services:\n  customer-core:\n    image: lakesidemutual/customer-core\n    ports:\n      - \"8081:8080\"",
      "explanation": "The service, which might be an internal service, maps the container's port 8080 to port 8081 on the host machine. If the host has a public IP, the service becomes accessible from the Internet."
    },
    {
      "artifact_type": "Deployment Configuration",
      "language": "docker-compose",
      "negative_example": "name-services:\n  build: name build\n image: project/name-service\n depends_on: name-service \n  environment: \n  ports: \n - 3020:80", 
      "explanation": "The service exposes port directly making it publicly accessible. This is a 'publicly accessible microservice' smell if not protected by authentication or a firewall."
    },
    {
      "artifact_type": "docker-compose",
      "language": "yaml",
      "negative_example": "services:\n  payment-service:\n    build: ./payment-service\n    ports:\n      - \"8080:8080\"",
      "explanation": "The microservice exposes port 8080 directly on the host machine, making it publicly accessible. This is a 'publicly accessible microservice' smell if not protected by authentication or a firewall."
    },
    {
      "artifact_type": "Deployment Configuration",
      "language": "docker-compose",
      "negative_example": "services:\n  activemq:\n    image: rmohr/activemq\n    ports:\n      - \"8161:8161\"\n      - \"61616:61616\"",
      "explanation": "The ActiveMQ administration console (port 8161) and the communication protocol (61616) are publicly exposed. An attacker could try to access the console with default credentials or exploit protocol vulnerabilities."
    },
    {
      "artifact_type": "Deployment Configuration",
      "language": "Kubernetes Service (YAML)",
      "negative_example": "apiVersion: v1\nkind: Service\nmetadata:\n  name: policy-management-svc\nspec:\n  type: LoadBalancer\n  selector:\n    app: policy-management\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080",
      "explanation": "Using `type: LoadBalancer` in a cloud environment provisions a public load balancer with an IP address accessible from the Internet. This is correct for an API Gateway, but incorrect for an internal service."
    },
    {
      "artifact_type": "Deployment Configuration",
      "language": "docker-compose",
      "negative_example": "services:\n  risk-management-nodejs:\n    image: lakesidemutual/risk-management-nodejs\n    ports:\n      - \"3000:3000\"",
      "explanation": "Even though this Node.js service might be intended for internal risk analysis, exposing it via port mapping makes it a potential entry point for attacks."
    },
    {
      "artifact_type": "Dockerfile",
      "language": "Dockerfile",
      "negative_example": "FROM tomcat:9.0\nEXPOSE 8080",
      "explanation": "Although `EXPOSE` does not publish the port by itself, it documents the intention to expose it. When combined with `docker run -P`, it would publish port 8080 to a random host port, potentially making the service accessible."
    },
    {
      "artifact_type": "Cloud Configuration",
      "language": "Firewall Rule (Pseudo-code)",
      "negative_example": "firewall-rules create allow-all --source-ranges 0.0.0.0/0 --target-tags internal-service",
      "explanation": "An overly permissive firewall rule that allows traffic from any IP address (`0.0.0.0/0`) to internal microservices, bypassing perimeter protection."
    },
    {
      "artifact_type": "Deployment Configuration",
      "language": "docker-compose",
      "negative_example": "services:\n  database:\n    image: postgres\n    ports:\n      - \"5432:5432\"",
      "explanation": "Directly exposing a database port to the Internet is an extremely high security risk. Databases should only be accessible through the private microservices network."
    },
    {
      "artifact_type": "Kubernetes Service (YAML)",
      "language": "Kubernetes Service (YAML)",
      "negative_example": "apiVersion: v1\nkind: Service\nmetadata:\n  name: customer-db-svc\nspec:\n  type: NodePort\n  ports:\n  - port: 5432\n    nodePort: 30054",
      "explanation": "Using `type: NodePort` exposes the service on a specific port on every node in the cluster. If the nodes have public IPs, the service (in this case a database) becomes accessible from the outside."
    },
    {
      "artifact_type": "Application Configuration",
      "language": "Java (Spring Boot)",
      "negative_example": "server.address=0.0.0.0",
      "explanation": "In `application.properties`, configuring `server.address` to `0.0.0.0` makes the application bind to all network interfaces. If run outside of a container on a machine with a public IP, the application will be directly exposed."
    },
    {
      "artifact_type": "Deployment Configuration",
      "language": "docker-compose",
      "negative_example": "version: '3.7'\nservices:\n  api_gateway:\n    ...\n  customer_service:\n    ...\n    # No network defined, uses default bridge network",
      "explanation": "If a custom network is not defined, Docker Compose uses a default bridge network. If a container is connected to multiple networks, including a public one, it could act as an unintentional bridge to internal services."
    },
    {
      "artifact_type": "docker-compose",
      "language": "yaml",
      "negative_example": "services:\n  user-info:\n    image: example/user-info\n    ports:\n      - \"8200:8200\"",
      "explanation": "The 'user-info' service exposes personal data and is publicly accessible without any authentication configured. While acceptable in development, this is a security smell in production environments."
    }
  ],
  "positive_examples": [
    {
      "artifact_type": "Deployment Configuration",
      "language": "Docker Compose (YAML)",
      "positive_example": "services:\n  customer-core:\n    image: lakesidemutual/customer-core\n    # No 'ports' section. Communication happens over the internal docker network.",
      "explanation": "By omitting the `ports` section, the `customer-core` service is reachable by other services on the same Docker network (e.g., `api-gateway`) but is not exposed to the host machine or the Internet."
    },
    {
      "artifact_type": "Deployment Configuration",
      "language": "Docker Compose (YAML)",
      "positive_example": "services:\n  activemq:\n    image: rmohr/activemq\n    # Ports are not exposed to the host machine.",
      "explanation": "The ActiveMQ console and its communication ports are not exposed. Microservices communicate with it via its service name on the internal Docker network."
    },
    {
      "artifact_type": "Deployment Configuration",
      "language": "Kubernetes Service (YAML)",
      "positive_example": "apiVersion: v1\nkind: Service\nmetadata:\n  name: policy-management-svc\nspec:\n  type: ClusterIP\n  selector:\n    app: policy-management\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080",
      "explanation": "By using `type: ClusterIP`, the service gets an internal IP address within the Kubernetes cluster, making it accessible only by other pods and services within the same cluster, but not from the outside."
    },
    {
      "artifact_type": "Deployment Configuration",
      "language": "Docker Compose (YAML)",
      "positive_example": "services:\n  risk-management-nodejs:\n    image: lakesidemutual/risk-management-nodejs\n    expose:\n      - \"3000\"",
      "explanation": "The `expose` instruction makes the port accessible to other services on the same Docker network without publishing it to the host. It is good practice for documenting which ports are used internally."
    },
    {
      "artifact_type": "Cloud Configuration",
      "language": "Firewall Rule (Pseudo-code)",
      "positive_example": "firewall-rules create allow-internal --source-tags internal-network --target-tags internal-service",
      "explanation": "A restrictive firewall rule that allows communication only between resources that share the same internal network tag, blocking all external traffic."
    },
    {
      "artifact_type": "Deployment Configuration",
      "language": "Docker Compose (YAML)",
      "positive_example": "networks:\n  lakeside_net:\n\nservices:\n  api_gateway:\n    networks:\n      - lakeside_net\n    ports:\n      - \"80:8080\"\n  customer_service:\n    networks:\n      - lakeside_net",
      "explanation": "A custom network (`lakeside_net`) is defined. Only the API Gateway exposes a port. The `customer_service` communicates with the gateway through the private network, remaining isolated."
    },
    {
      "artifact_type": "Deployment Configuration",
      "language": "Kubernetes (YAML)",
      "positive_example": "apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: api-ingress\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /customers\n        pathType: Prefix\n        backend:\n          service:\n            name: api-gateway-svc\n            port:\n              number: 80",
      "explanation": "An Ingress object manages external access, directing traffic to a single entry point (API Gateway), which then routes it to internal ClusterIP services."
    },
    {
      "artifact_type": "Kubernetes Service (YAML)",
      "language": "Kubernetes Service (YAML)",
      "positive_example": "apiVersion: v1\nkind: Service\nmetadata:\n  name: customer-db-svc\nspec:\n  type: ClusterIP\n  ports:\n  - port: 5432",
      "explanation": "The database service is of type `ClusterIP`, which means it is only reachable via its internal cluster IP by the microservices that need it (e.g., `customer-core`)."
    },
    {
      "artifact_type": "Cloud Configuration",
      "language": "VPC (Virtual Private Cloud)",
      "positive_example": "resource \"aws_subnet\" \"private\" {\n  vpc_id     = aws_vpc.main.id\n  # No route to an Internet Gateway\n}",
      "explanation": "Internal microservices and databases are deployed in a private subnet within a VPC. This subnet has no route to an Internet Gateway, preventing any direct communication with the Internet."
    },
    {
      "artifact_type": "Deployment Configuration",
      "language": "Kubernetes NetworkPolicy",
      "positive_example": "apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: db-access-policy\nspec:\n  podSelector:\n    matchLabels:\n      app: database\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          app: customer-core",
      "explanation": "A NetworkPolicy restricts incoming traffic to the database pod, allowing connections only from pods with the label `app: customer-core`. This provides application-level network isolation."
    }
  ],
  "potential_risks": [
    "Direct and unauthorized access to databases and message brokers.",
    "Bypassing of security controls implemented in the API Gateway.",
    "Increased application attack surface.",
    "Exploitation of known vulnerabilities in unpatched third-party services (e.g., ActiveMQ, Redis)."
  ]
}
