{
  "smell_name": "Hardcoded Secrets",
  "brief_description": "The inclusion of credentials, API keys, tokens, or other sensitive strings directly in the source code, configuration files, or deployment files. Code snippets containing these words: “password”, “apikey”, “secret” might contain this smell, check them out.",
  "microservices_context": [
    "Particularly critical in containerized environments where configuration files are often versioned in Git.",
    "Increases the attack surface, as anyone with access to the code or the container image can extract the credentials.",
    "Makes credential rotation a complex and error-prone process, requiring a new service build and deployment."
  ],
  "manifestations": [
    {
      "artifact_type": "Configuration File",
      "language": "Java Properties",
      "negative_example": "spring.datasource.password=MySecretPassword\nsecurity.jwt.secret=super-long-jwt-secret-key-for-signing",
      "explanation": "Secrets for the database and JWT signing are stored in plaintext in a properties file, which is often committed to version control."
    },
    {
       "artifact_type": "manifestation",
       "language": "JSON",
       "negative_example": "{\n  \"activemq\": {\n    \"host\": \"localhost\",\n    \"port\": 61613,\n    \"username\": \"user\",\n    \"password\": \"secret\",\n    \"queueName\": \"newpolicies\"\n  }\n}",
       "explanation": "This JSON configuration file contains credentials (username and password) for a message queue service (ActiveMQ) stored directly in plain text. This practice, known as “Hardcoded Secrets”, is a critical security vulnerability because it exposes sensitive information to anyone with access to the source code and makes password management and rotation extremely difficult and insecure."
	},
    {
      "artifact_type": "Containerization",
      "language": "Dockerfile",
      "negative_example": "ENV SECRET_KEY=my-super-secret-key-that-is-way-too-long",
      "explanation": "An environment variable with a secret is 'baked' into the Docker image, making it inspectable."
    },
    {
      "artifact_type": "Containerization",
      "language": "Dockerfile",
      "negative_example": "ARG api_key\nENV API_KEY=${api_key}",
      "explanation": "Using ARG to pass a secret at build time and then assigning it to an ENV bakes the secret into the image layer history, making it discoverable."
    },
    {
      "artifact_type": "Configuration File",
      "language": "Java Properties",
      "negative_example": "apikey.value=myapkivalure",
      "explanation": "API keys should not be hardcoded in a real application but injected by the container or managed in a data store "
    },
    {
      "artifact_type": "Frontend Framework",
      "language": "Vue",
      "negative_example": "<script>\nexport default {\n  data() {\n    return {\n      apiToken: 'auth-token-is-here'\n    };\n  }\n}\n</script>",
      "explanation": "An authentication token is stored in the state of a Vue component, ending up in the JavaScript bundle sent to the client."
    },
    {
      "artifact_type": "Frontend Framework",
      "language": "Vue",
      "negative_example": "// In .env.local\nVUE_APP_API_KEY=secret-key-goes-here",
      "explanation": "A secret API key is stored in a .env file using a prefix that makes it available in the client-side JavaScript bundle, exposing it to any user."
    },
    {
      "artifact_type": "Frontend Markup",
      "language": "HTML",
      "negative_example": "<input type=\"hidden\" name=\"apiKey\" value=\"some_secret_api_key\">",
      "explanation": "A secret key is stored in a hidden input field in an HTML form, making it visible to anyone who views the page source."
    },
    {
      "artifact_type": "Frontend Markup",
      "language": "HTML",
      "negative_example": "<script>\n  var analyticsToken = 'ua-12345-secret';\n</script>",
      "explanation": "A secret token is defined in an inline script tag within an HTML file, exposing it directly on the client side."
    },
    {
      "artifact_type": "Kubernetes Configuration",
      "language": "YAML",
      "negative_example": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: busybox\nspec:\n  containers:\n  - name: app\n    image: busybox\n    env:\n    - name: DB_PASSWORD\n      value: \"password1234\"",
      "explanation": "The secret is placed directly in the YAML manifest, instead of referencing a Kubernetes Secret."
    },
    {
      "artifact_type": "Configuration File",
      "language": "YAML",
      "negative_example": "spring:\n  datasource:\n    username: root\n    password: password123\n  security:\n    oauth2:\n      client:\n        client-secret: my-google-client-secret",
      "explanation": "Database and OAuth2 client secrets are hardcoded in a Spring Boot application.yml file."
    },
    {
      "artifact_type": "Containerization",
      "language": "YAML",
      "negative_example": "services:\n  my_app:\n    image: my_app_image\n    environment:\n      - DB_PASSWORD=my_secret_db_pass",
      "explanation": "A secret is defined directly in the docker-compose.yml file, which is typically version controlled."
    },  
    {
      "artifact_type": "Source Code",
      "language": "JavaScript",
      "negative_example": "const apiKey = 'sk_live_abcdefghijklmnopqrstuvwxyz1234567890';",
      "explanation": "An API key is hardcoded in a JavaScript constant, making it visible in the frontend or backend."
    },
    {
      "artifact_type": "Source Code",
      "language": "JavaScript",
      "negative_example": "const client = new MongoClient(\"mongodb://user:password@host:27017\");",
      "explanation": "Full database connection URI with username and password hardcoded directly in the application logic."
    },
    {
      "artifact_type": "Configuration File",
      "language": "JSON",
      "negative_example": "{\n  \"db_config\": {\n    \"user\": \"admin\",\n    \"password\": \"Password123!\"\n  }\n}",
      "explanation": "Credentials stored in a JSON configuration file that might be checked into source control."
    },
    {
      "artifact_type": "Source Code",
      "language": "Java",
      "negative_example": "Algorithm algorithm = Algorithm.HMAC256(\"secret\");",
      "explanation": "A static string literal is used as a secret key for signing JWTs, making it readable by anyone with access to the source code or compiled bytecode."
    },
    {
      "artifact_type": "Source Code",
      "language": "Java",
      "negative_example": "static String secret = \"secret\";\n// ... in a method ...\nAlgorithm algorithm = Algorithm.HMAC256(secret);",
      "explanation": "A secret key is assigned to a static variable within the class. Although it's a variable, the value is still hardcoded in the same file and is easily discoverable."
    },
    {
      "artifact_type": "Source Code",
      "language": "Java",
      "negative_example": "String dbPassword = \"MySuperSecretPassword!@#$\";\nConnection conn = DriverManager.getConnection(DB_URL, USER, dbPassword);",
      "explanation": "The database password is hardcoded in a Java string."
    },
    {
    "artifact_type": "Source Code",
    "language": "Java",
    "negative_example": "int VerifyAdmin(String password) {\n  if (!password.equals(\"Mew!\")) {\n    return(0);\n  }\n  // Diagnostic Mode\n  return(1);\n}",
    "explanation": "A hardcoded password, often for a 'backdoor' or diagnostic purposes, is checked directly in the code. This is highly insecure as it's static, visible in the source, and bypasses standard authentication mechanisms."
  },
  {
    "artifact_type": "Source Code",
    "language": "Java",
    "negative_example": "DriverManager.getConnection(url, \"scott\", \"tiger\");",
    "explanation": "Classic hardcoding of database credentials (username and password) directly in the Java Database Connectivity (JDBC) call. This exposes the database to anyone who can read the source code."
  }
  ],
  "positive": [
  {
  "artifact_type": "Source Code",
  "language": "Java",
  "positive_example": "private static String generateToken(String secretKey) {\n    try {\n        // The secretKey variable is safely used here.\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        \n        String token = JWT.create()\n            .withIssuer(\"auth0\")\n            .sign(algorithm);\n        \n        return token;\n\n    } catch (JWTCreationException exception) {\n        // Handle the exception appropriately.\n        System.err.println(\"Error creating JWT: \" + exception.getMessage());\n        return null;\n    }\n}",
 "explanation":"This secure pattern avoids hardcoding by passing the secret key as a parameter to the method. This implies that the secret is loaded from a secure external source (e.g., environment variables, a secrets manager) at a higher level in the application, and the function only receives it as a variable, without knowing its actual value at compile time."
   },
  {
    "artifact_type": "positive",
    "language": "Java",
    "positive_example": "@Service\npublic class DatabaseConnector {\n\n    @Value(\"${db.connection.url}\")\n    private String dbUrl;\n\n    @Value(\"${db.user}\")\n    private String username;\n\n    @Value(\"${db.password}\")\n    private String password;\n\n    public Connection connect() {\n        // La logica per connettersi usa le variabili iniettate\n        return DriverManager.getConnection(dbUrl, username, password);\n    }\n}",
    "explanation": "This Java code uses Spring Boot's @Value annotation to inject database credentials from an external source (e.g., application.properties file or environment variables). The credentials are not written directly in the code, preventing hardcoding."
  },
  {
    "artifact_type": "positive",
    "language": "Python",
    "positive_example": "import os\nimport psycopg2\n\n# Carica le credenziali in modo sicuro dalle variabili d'ambiente\nDB_HOST = os.getenv(\"DB_HOST\", \"localhost\")\nDB_NAME = os.getenv(\"DB_NAME\")\nDB_USER = os.getenv(\"DB_USER\")\nDB_PASSWORD = os.getenv(\"DB_PASSWORD\")\n\ndef get_db_connection():\n    if not DB_PASSWORD or not DB_USER or not DB_NAME:\n        raise ValueError(\"Le variabili d'ambiente del database non sono impostate\")\n    conn = psycopg2.connect(\n        host=DB_HOST,\n        dbname=DB_NAME,\n        user=DB_USER,\n        password=DB_PASSWORD\n    )\n    return conn",
    "explanation": "This Python script uses the os.getenv() function to read database credentials from the system's environment variables. This is a standard and secure method to avoid writing secrets in the code."
  },
  {
    "artifact_type": "positive",
    "language": "JavaScript",
    "positive_example": "require('dotenv').config(); // Carica le variabili da un file .env in sviluppo\n\nconst express = require('express');\nconst app = express();\n\nconst API_KEY = process.env.THIRD_PARTY_API_KEY;\n\nif (!API_KEY) {\n  console.error('ERRORE: La variabile d\\'ambiente THIRD_PARTY_API_KEY non è definita.');\n  process.exit(1);\n}\n\napp.get('/data', (req, res) => {\n  // La logica usa la API_KEY caricata in modo sicuro\n  fetch(`https://api.example.com/data?apiKey=${API_KEY}`)\n    .then(response => response.json())\n    .then(data => res.json(data));\n});",
    "explanation": "This Node.js code loads an API key from environment variables via process.env. The 'dotenv' library is used to facilitate local development, but in production, the variables are provided by the hosting system. The key is not hardcoded."
  },
  {
    "artifact_type": "positive",
    "language": "Dockerfile",
    "positive_example": "FROM maven:3.8.5-openjdk-17\n\n# Definisci un argomento per il token che non verrà salvato nell'immagine finale\nARG NEXUS_TOKEN\n\nWORKDIR /app\nCOPY . /app\n\n# Usa il secret durante la build, ma non lo salvare nell'immagine\nRUN mvn -s settings.xml clean install -DnexusToken=${NEXUS_TOKEN}",
    "explanation": "This Dockerfile uses an ARG (build argument) to pass an authentication token. This token is only available during the build process and is not persisted in the final Docker image layers, thus avoiding secret exposure."
  },
  {
    "artifact_type": "positive",
    "language": "YAML",
    "positive_example": "version: '3.8'\nservices:\n  backend:\n    image: my-app:latest\n    environment:\n      - DB_USER=postgres\n      - DB_PASSWORD=${POSTGRES_PASSWORD} # Il valore è preso da una variabile d'ambiente o da un file .env\n    ports:\n      - \"8080:8080\"\n\n  database:\n    image: postgres:13\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}",
    "explanation": "This docker-compose.yml file does not hardcode the database password. Instead, it uses the ${POSTGRES_PASSWORD} syntax to indicate that the value should be replaced by an environment variable present on the host machine or defined in an .env file."
  },
  {
    "artifact_type": "positive",
    "language": "YAML",
    "positive_example": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n  - name: my-container\n    image: my-app\n    env:\n      - name: DB_PASSWORD\n        valueFrom:\n          secretKeyRef:\n            name: my-db-secret # Nome del Secret in Kubernetes\n            key: password # Chiave all'interno del Secret",
    "explanation": "This Kubernetes manifest demonstrates how to securely provide a password to a container. The value of the DB_PASSWORD environment variable is taken from a Kubernetes 'Secret' object, which is the native mechanism for managing secrets."
  },
  {
    "artifact_type": "positive",
    "language": "Java",
    "positive_example": "public class ConfigLoader {\n    public static Properties loadConfig(String path) throws IOException {\n        Properties props = new Properties();\n        try (InputStream input = new FileInputStream(path)) {\n            props.load(input);\n        }\n        return props;\n    }\n\n    public void connect() {\n        Properties config = loadConfig(\"/etc/app/config.properties\");\n        String user = config.getProperty(\"db.user\");\n        String pass = config.getProperty(\"db.password\");\n        // ... usa user e pass per connettersi\n    }\n}",
    "explanation": "This Java code loads configuration properties, including credentials, from an external file. The path '/etc/app/config.properties' suggests that the file is managed externally to the application package, which is a secure practice as long as the file itself is protected."
  },
  {
    "artifact_type": "positive",
    "language": "JSON",
    "positive_example": "{\n  \"dataSource\": {\n    \"url\": \"jdbc:postgresql://localhost:5432/mydatabase\",\n    \"username\": \"${DB_USER}\",\n    \"password\": \"${DB_PASS}\"\n  },\n  \"logging\": {\n    \"level\": \"INFO\"\n  }\n}",
    "explanation": "This JSON configuration file does not contain the actual credentials. Instead, it uses placeholders (e.g., ${DB_PASS}) that indicate the values will be injected at runtime by another system, such as a configuration manager or environment variables."
  },
  {
    "artifact_type": "positive",
    "language": "Python",
    "positive_example": "from google.cloud import secretmanager\n\ndef get_api_key():\n    client = secretmanager.SecretManagerServiceClient()\n    \n    # Il nome della risorsa del segreto\n    name = \"projects/my-gcp-project/secrets/api-key-secret/versions/latest\"\n    \n    # Accedi alla versione del segreto\n    response = client.access_secret_version(request={\"name\": name})\n    \n    payload = response.payload.data.decode(\"UTF-8\")\n    return payload\n\nAPI_KEY = get_api_key()",
    "explanation": "This Python script retrieves an API key from Google Secret Manager. This is a highly secure approach because the credentials are never in the code, on the filesystem, or in environment variables, but are dynamically retrieved from a dedicated cloud service."
  },
  {
    "artifact_type": "positive",
    "language": "Bash",
    "positive_example": "#!/bin/bash\n\n# Chiede all'utente di inserire la password in modo interattivo e sicuro\necho -n \"Enter Database Password: \"\nread -s DB_PASSWORD\necho\n\nif [[ -z \"$DB_PASSWORD\" ]]; then\n    echo \"Password cannot be empty!\"\n    exit 1\nfi\n\n# Usa la password per eseguire un comando\nexport PGPASSWORD=$DB_PASSWORD\npsql -h myhost -U myuser -d mydb -c \"SELECT * FROM users;\"",
    "explanation": "This Bash script does not hardcode a password. Instead, it uses the 'read -s' command to ask the user to enter it interactively, without displaying it on the screen. The password is then used as an environment variable for the current process only."
  }
  ],
  "potential_risks": [
    "Unauthorized access to sensitive data.",
    "Compromise of third-party services (cloud providers, external APIs).",
    "Lateral movement within the infrastructure by an attacker."
  ]	
}
