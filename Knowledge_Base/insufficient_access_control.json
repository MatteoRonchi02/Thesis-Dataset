{
  "smell_name": "Insufficient Access Control",
  "brief_description": "This smell occurs when a user can access resources or perform actions for which they should not have authorization. In a microservices architecture, this often manifests as API endpoints that do not adequately verify the user's permissions or their ownership of the requested resource.",
  "microservices_context": [
    "customer-core",
    "policy-management-backend"
  ],
  "manifestations": [
    {
      "artifact_type": "Controller Method",
      "language": "Java (Spring Boot)",
      "negative_example": "public Customer getCustomerDetails(@PathVariable String customerId) {\n  return customerRepository.findById(customerId);\n}",
      "explanation": "This endpoint retrieves customer details based only on the ID. Any authenticated user can request the data of any other user, simply by knowing their ID. It lacks a check to verify that the user making the request is the owner of the profile or an authorized administrator."
    },
    {
      "artifact_type": "Controller Method",
      "language": "Java (Spring Boot)",
      "negative_example": "@PostMapping(\"/policies/{policyId}/update\")\npublic void updatePolicy(@PathVariable String policyId, @RequestBody PolicyUpdateDetails details) {\n  policyService.update(policyId, details);\n}",
      "explanation": "Similar to the first case, this method allows anyone who is authenticated to update a policy. It does not verify if the user is the policyholder."
    },
    {
      "artifact_type": "Controller Method",
      "language": "Java (Spring Boot)",
      "negative_example": "@GetMapping(\"/admin/all-customers\")\npublic List<Customer> getAllCustomers() {\n  return customerRepository.findAll();\n}",
      "explanation": "The URL suggests administrator access, but it lacks any security annotation (like @PreAuthorize('hasRole(\"ADMIN\")')) to actually enforce this restriction. Consequently, any authenticated user could access this list."
    },
    {
      "artifact_type": "Service Logic",
      "language": "Java",
      "negative_example": "public void deleteCustomer(String customerId) {\n  customerRepository.deleteById(customerId);\n}",
      "explanation": "The service logic for deleting a user does not include permission checks. If this method is exposed via a controller without proper checks, a user could delete other users."
    },
    {
      "artifact_type": "Controller Method",
      "language": "Java (Spring Boot)",
      "negative_example": "@RequestMapping(\"/api/customers\")\npublic class CustomerController {\n  // ... endpoints without method-level security\n}",
      "explanation": "The entire controller class has no class-level security annotations. If the global security configuration is too permissive, all endpoints within it become vulnerable."
    },
    {
      "artifact_type": "Controller Method",
      "language": "Java (Spring Boot)",
      "negative_example": "@PutMapping(\"/customers/{id}\")\npublic Customer updateCustomer(@PathVariable String id, @RequestBody Customer customer) {\n  // Logic to update customer\n}",
      "explanation": "An update endpoint that does not validate that the authenticated user matches the ID of the customer being modified."
    },
    {
      "artifact_type": "Controller Method",
      "language": "Java (Spring Boot)",
      "negative_example": "@GetMapping(\"/policies/export\")\npublic ResponseEntity<byte[]> exportAllPolicies() {\n  // ... logic to export all policies to a CSV file\n}",
      "explanation": "A bulk export feature that should be limited only to specific roles (e.g., analysts, admins) but is exposed without role checks."
    },
    {
      "artifact_type": "Controller Method",
      "language": "Node.js (Express)",
      "negative_example": "app.get('/api/user/:id/profile', (req, res) => {\n  const { id } = req.params;\n  db.findUserById(id).then(user => res.json(user));\n});",
      "explanation": "A Node.js endpoint that retrieves a user profile. It lacks an authorization middleware to check if `req.user.id` (the authenticated user) is equal to `id` or if `req.user` has an administrator role."
    },
    {
      "artifact_type": "Configuration",
      "language": "Java (Spring Security)",
      "negative_example": "http.authorizeRequests().anyRequest().authenticated();",
      "explanation": "This configuration only ensures that the user is authenticated, but it does not implement any granular, role-based or permission-based access control. It is insufficient access control for most real-world applications."
    },
    {
      "artifact_type": "Service Logic",
      "language": "Java",
      "negative_example": "public Claim getClaimDetails(String claimId) {\n  return claimRepository.findById(claimId);\n}",
      "explanation": "The business logic for retrieving claim details does not verify that the user who requested the details is the holder of the policy associated with the claim."
    }
  ],
  "positive": [
    {
      "artifact_type": "Controller Method",
      "language": "Java (Spring Boot)",
      "positive_example": "@GetMapping(\"/customers/{customerId}\")\n@PreAuthorize(\"#customerId == authentication.principal.username or hasRole('ADMIN')\")\npublic Customer getCustomerDetails(@PathVariable String customerId) {\n  return customerRepository.findById(customerId);\n}",
      "explanation": "The @PreAuthorize annotation ensures that only the profile owner (whose username matches the customerId) or a user with the 'ADMIN' role can access the resource."
    },
    {
      "artifact_type": "Controller Method",
      "language": "Java (Spring Boot)",
      "positive_example": "@PostMapping(\"/policies/{policyId}/update\")\n@PreAuthorize(\"@policySecurityService.isOwner(authentication, #policyId)\")\npublic void updatePolicy(@PathVariable String policyId, @RequestBody PolicyUpdateDetails details) {\n  policyService.update(policyId, details);\n}",
      "explanation": "Authorization is delegated to a service (`policySecurityService`) that contains the logic to verify if the authenticated user is the owner of the policy. This approach is clean and reusable."
    },
    {
      "artifact_type": "Controller Method",
      "language": "Java (Spring Boot)",
      "positive_example": "@GetMapping(\"/admin/all-customers\")\n@PreAuthorize(\"hasRole('ADMIN')\")\npublic List<Customer> getAllCustomers() {\n  return customerRepository.findAll();\n}",
      "explanation": "Access to this endpoint is correctly restricted to only users who have the 'ADMIN' role."
    },
    {
      "artifact_type": "Service Logic",
      "language": "Java",
      "positive_example": "public void deleteCustomer(String customerId, UserDetails currentUser) {\n  if (!currentUser.getUsername().equals(customerId)) {\n    throw new AccessDeniedException(\"Unauthorized\");\n  }\n  customerRepository.deleteById(customerId);\n}",
      "explanation": "The service logic now requires the current user's identity and throws an exception if there is no match, preventing unauthorized deletions."
    },
    {
      "artifact_type": "Controller Method",
      "language": "Java (Spring Boot)",
      "positive_example": "@RequestMapping(\"/api/customers\")\n@PreAuthorize(\"hasRole('USER')\")\npublic class CustomerController {\n  // ... endpoints\n}",
      "explanation": "By applying @PreAuthorize at the class level, a baseline security requirement (in this case, having the 'USER' role) is defined for all endpoints within it."
    },
    {
      "artifact_type": "Controller Method",
      "language": "Java (Spring Boot)",
      "positive_example": "@PutMapping(\"/customers/{id}\")\n@PreAuthorize(\"#id == authentication.name\")\npublic Customer updateCustomer(@PathVariable String id, @RequestBody Customer customer) {\n  // Logic to update customer\n}",
      "explanation": "The @PreAuthorize annotation uses SpEL (Spring Expression Language) to compare the ID in the URL with the name of the authenticated user."
    },
    {
      "artifact_type": "Controller Method",
      "language": "Java (Spring Boot)",
      "positive_example": "@GetMapping(\"/policies/export\")\n@PreAuthorize(\"hasAnyRole('ANALYST', 'ADMIN')\")\npublic ResponseEntity<byte[]> exportAllPolicies() {\n  // ... logic to export\n}",
      "explanation": "Access to the export functionality is correctly restricted to multiple authorized roles."
    },
    {
      "artifact_type": "Controller Method",
      "language": "Node.js (Express)",
      "positive_example": "app.get('/api/user/:id/profile', ensureIsOwnerOrAdmin, (req, res) => {\n  const { id } = req.params;\n  db.findUserById(id).then(user => res.json(user));\n});",
      "explanation": "A middleware (`ensureIsOwnerOrAdmin`) is used to perform authorization checks before the endpoint's logic is executed. This separates security concerns from business logic."
    },
    {
      "artifact_type": "Configuration",
      "language": "Java (Spring Security)",
      "positive_example": "http.authorizeRequests()\n  .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n  .antMatchers(\"/api/users/**\").hasRole(\"USER\")\n  .anyRequest().authenticated();",
      "explanation": "This configuration defines granular access rules based on URL patterns, applying different role requirements for different paths."
    },
    {
      "artifact_type": "Service Logic",
      "language": "Java",
      "positive_example": "public Claim getClaimDetails(String claimId, UserDetails currentUser) {\n  Claim claim = claimRepository.findById(claimId);\n  if (!policySecurityService.isOwner(currentUser, claim.getPolicyId())){\n    throw new AccessDeniedException(\"Access Denied\");\n  }\n  return claim;\n}",
      "explanation": "The service explicitly checks for ownership of the policy associated with the claim before returning the details, preventing data leakage."
    }
  ],
  "potential_risks": [
    "Exposure of sensitive data (PII, financial data).",
    "Unauthorized modification or deletion of data.",
    "Access to administrator-only functionality (Privilege Escalation).",
    "Violation of user privacy and non-compliance with regulations like GDPR."
  ]
}
